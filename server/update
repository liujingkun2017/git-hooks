#!/opt/gitlab/embedded/bin/ruby
# Fix the PATH so that gitlab-shell can find git-upload-pack and friends.
ENV['PATH'] = '/opt/gitlab/bin:/opt/gitlab/embedded/bin:' + ENV['PATH']

#!/usr/bin/env ruby

# This file was placed here by GitLab. It makes sure that your pushed commits
# will be processed properly.

require 'logger'

ref_name = ARGV[0]
old_value = ARGV[1]
new_value = ARGV[2]
repo_path = Dir.pwd

####################################################################################################################################


class CustomGitHooks

  #get group name
  def getGroupName(repo_path)
    ref_list = repo_path.split("/")
    group_name = ref_list[6].split("/")[0]
    return group_name
  end

  #get project name
  def getProjectName(repo_path)
    ref_list = repo_path.split("/")
    project_name = ref_list[7].split("/")[0]
    return project_name
  end

  #get branch name
  def getBranchName(ref_name)
    ref_list = ref_name.split("/")
    name = ref_list[2]
    return name
  end

  #get branch type
  def getBranchType(ref_name)
    ref_list = ref_name.split("/")
    type = ref_list[1]
    return type
  end

  #get operation type
  def getOperationType(old_value, new_value, branch_type)

    #tag
    if branch_type == "tags"
      if old_value =~ /^0+$/
        operationType = "create"
      else
        operationType = "delete"
      end
    end

    #branch
    if branch_type == "heads"
      if old_value =~ /^0+$/
        operationType = "create"
      elsif new_value =~ /^0+$/
        operationType = "delete"
      else
        operationType = "update"
      end
    end
    return operationType
  end

  #check branch/tag name
  def checkBranchOrTagName(branch_type, name)

    check_code = 0
    check_msg = "success"

    #check branch
    if branch_type == "heads"
      return checkBranchName(name)
    end

    #check tag
    if branch_type == "tags"
      return checkTagName(name)
    end
    return check_code, check_msg
  end

  #check branch name
  def checkBranchName(branch_name)
    check_code = 0
    check_msg = "success"
    unless branch_name.split("_").length == 2
      check_code = 1
      check_msg = "branch name must have only one _ "
      return check_code, check_msg
    end

    unless branch_name =~ /\A(dev|hot|reg)(_)/
      check_code = 1
      check_msg = "branch name must start with dev|hot|reg"
      return check_code, check_msg
    end

    unless branch_name.split("_")[1] =~ /^[1-9]\d{3}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$/
      check_code = 1
      check_msg = "branch name timestamp format is yyyymmdd "
      return check_code, check_msg
    end
    return check_code, check_msg
  end

  #check tag name
  def checkTagName(tag_name)
    check_code = 0
    check_msg = "success"
    unless tag_name.split("_").length == 3
      check_code = 1
      check_msg = "tag name must have only two _ "
      return check_code, check_msg
    end

    unless tag_name =~ /\A(dev|reg)(_)/
      check_code = 1
      check_msg = "tag name must start with dev|hot|reg"
      return check_code, check_msg
    end

    unless tag_name.split("_")[1] =~ /^[1-9]\d{3}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$/
      check_code = 1
      check_msg = "tag name timestamp format is yyyymmdd "
      return check_code, check_msg
    end

    unless tag_name.split("_")[1] =~ /^[1-9]\d{3}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$/
      check_code = 1
      check_msg = "tag name timestamp format is yyyymmdd "
      return check_code, check_msg
    end

    unless tag_name.split("_")[2] =~ /(?<!\d)\d\d(?!\d)/
      check_code = 1
      check_msg = "tag num formt must has two nums "
      return check_code, check_msg
    end
    return check_code, check_msg
  end
end


logger = Logger.new("log.txt")
logger.level = Logger::INFO

logger.info("ref_name:" + ARGV[0])
logger.info("old_value:" + ARGV[1])
logger.info("new_value:" + ARGV[2])
logger.info("repo_path:" + Dir.pwd)

local = CustomGitHooks.new

group_name = local.getGroupName(repo_path)
printf "group_name:" + group_name + "\n"
logger.info("group_name:" + group_name)

project_name = local.getProjectName(repo_path)
printf "project_name:" + project_name + "\n"
logger.info("project_name:" + project_name)

branch_type = local.getBranchType(ref_name)
printf "branch_type:" + branch_type + "\n"
logger.info("branch_type:" + branch_type)

branch_name = local.getBranchName(ref_name)
printf "branch_name:" + branch_name + "\n"
logger.info("branch_name:" + branch_name)


#check branchName for each branchType
ary = ["demo", "web", "app",]
ary.each do |i|
  if group_name == i

    if branch_name != "master"
      code, message = local.checkBranchOrTagName(branch_type, branch_name)
      puts code
      puts message
      if (code == 1)
        exit 1
      end
    end

  end
end

operation_type = local.getOperationType(old_value, new_value, branch_type)
printf "operation_type:" + operation_type + "\n"
logger.info("operation_type:" + operation_type)
#delete is forbiden
if operation_type == "delete"
  exit 1
end


####################################################################################################################################

require_relative '../lib/gitlab_custom_hook'

if GitlabCustomHook.new.update(ref_name, old_value, new_value, repo_path)
  exit 0
else
  exit 1
end

